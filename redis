
一、简介
Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 
它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 
Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。

Remote dictionary system 远程数据存储系统


二、Redis和Memcache的主要区别
(一) Redis不仅仅支持简单的key/value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。
(二) Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。
(三) 虚拟内存--Redis当物理内存用完时，可以将一些很久没用到value交换到磁盘
(四) 应用场景不一样：Redis除了作为NoSQL数据库使用外，还能用做消息队列、数据堆栈和数据缓存等；Memcached适合于缓存SQL语句、数据集、用户临时性数据、延迟查询数据和session等


三、下载安装Redis
(一)Linux下安装
$ wget http://download.redis.io/releases/redis-2.8.17.tar.gz
$ tar xzf redis-2.8.17.tar.gz
$ cd redis-2.8.17
$ make
(二) Windows下安装
1 前往https://github.com/MSOpenTech/redis/releases下载Redis-xxx.zip文件
2 解压Redis-xxx.zip并copy到相应目录
3 以管理员的身份打开CMD窗口，切换到redis目录，执行redis-server --service-install redis.windows.conf
     4 命令说明
redis-server --service-install 	 //安装
redis-server --service-uninstall //卸载服务 sc delete 服务名称
redis-server --service-start	 //启动
redis-server --service-stop	 //停止

(二)redis目录文件说明
redis-server.exe 服务程序
  	redis.conf redis配置文件
  	redis-cli.exe 命令行客户端
  	redis-check-aof.exe 更新日志检查
  	redis-benchmark.exe 性能测试，用以模拟同时由N个客户端发送M个 SETs/GETs 查询 (类似于 Apache的 ab 工具)

，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，

*************************redis.conf参数说明

redis.conf 配置项说明如下：
1. Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程。不支持Windows 
    daemonize no 
2. 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定，不支持	Windows。
    pidfile /var/run/redis.pid
3. 指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字
    port 6379
4. 绑定的主机地址
    bind 127.0.0.1
5.当客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能
    timeout 300
6. 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose
    loglevel verbose
7. 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null
    logfile stdout
8. 设置数据库的数量，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id
    databases 16
9. 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合
    save <seconds> <changes>
    Redis默认配置文件中提供了三个条件：
    save 900 1
    save 300 10
    save 60 10000
    分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。
 
10. 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大
    rdbcompression yes
11. 指定本地数据库文件名，默认值为dump.rdb
    dbfilename dump.rdb
12. 指定本地数据库存放目录
    dir ./
13. 设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步
    slaveof <masterip> <masterport>
14. 当master服务设置了密码保护时，slav服务连接master的密码
    masterauth <master-password>
15. 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH <password>命令提供密码，默认关闭
    requirepass foobared
16. 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息
    maxclients 128
17. 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区
    maxmemory <bytes>
18. 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no
    appendonly no
19. 指定更新日志文件名，默认为appendonly.aof
     appendfilename appendonly.aof
20. 指定更新日志条件，共有3个可选值： 
    no：表示等操作系统进行数据缓存同步到磁盘（快） 
    always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全） 
    everysec：表示每秒同步一次（折衷，默认值）
    appendfsync everysec
 
21. 指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）
     vm-enabled no
22. 虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享
     vm-swap-file /tmp/redis.swap
23. 将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0
     vm-max-memory 0
24. Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值
     vm-page-size 32
25. 设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。
     vm-pages 134217728
26. 设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4
     vm-max-threads 4
27. 设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启
    glueoutputbuf yes
28. 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法
    hash-max-zipmap-entries 64
    hash-max-zipmap-value 512
29. 指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）
    activerehashing yes
30. 指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件
    include /path/to/local.conf


、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、
*********redis做订阅和发送信息*********************

<?php
//********消息发布
$redis=new Redis();
$redis->pconnect('127.0.0.1',6379);
$redis->auth('123456');
$redis->publish('msg123','hello aaaaaa');//向msg123的频道发信息

echo "msg send success \n";//提示信息，可以不写



?>

，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，
<?php
//***********订阅消息
//$redis->set('k11111','1111');
//echo $redis->get('k11111');
ini_set('default_socket_timeout',-1);//设置socket不过期
$redis=new Redis();//实例化redis
$redis->pconnect('127.0.0.1',6379);//链接redis
$redis->auth('123456');

echo "subscripb success \n";//提示信息可以不写
$redis->subscribe(['msg123'],'funcall');//订阅msg123频道号
//订阅的上面的回调函数
function funcall($redis,$chan,$msg){
	print_r(
		array(
			'redis'=>$redis,
			'chan'=>$chan,
			'msg123'=>$msg //对应的消息发布端的信息

		)
	);

}


?>













，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，























************Redis数据类型及相关命令
(一) Key命令
Select 选择数据库
Keys  查询当前有哪些key
可使用通配符 
*  0-多个 任意字符，
sit[ey] 任意一项
? 任意一个字符
Type key类型
Exists 判断key 是否存在
Rename 重名的情况下会覆盖
Renamenx 重名失败
Move  移动到其他数据库
Ttl  返回秒数  -1 永久有效 以后返回-2 	
Pttl 返回毫秒

Expire 设置有效期 秒数
EXPIREAT key timestamp 时间戳

Persist 设置永久有效
Del 删除
dbSize 数据库大小
flushDb 清空当前数据库
Flushall 清空所有数据库
Randomkey 随机返回key

---------------------------------------------------------------------------
Redis不仅仅支持简单的key/value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。

*****************字符串string  相当于 name=>wang
********设置值
set key value [EX seconds] [PX milliseconds] [NX|XX]  ******设置指定的key 例如set name wang
SETNX key value  ******只有在 key 不存在时设置 key 的值 
MSET key value [key value ...]  *******同时设置一个或多个 key-value 对 
MSETNX key value [key value ...] ***** 同时设置一个或多个 key-value对，当且仅当所有给定 key 都不存在。：

********获取值
get key  ******获得指定的key的值：get key    例如get name
MGET key1 [key2..] *******获取所有(一个或多个)给定 key 的值
GETRANGE key start end *******返回 key 中字符串值的子字符,可用负数

********其它
SETRANGE key offset value 用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。
STRLEN key 返回 key 所储存的字符串值的长度。
INCR key 将 key 中储存的数字值增一。
DECR key 将 key 中储存的数字值减一。
APPEND key value 如果 key 已经存在并且是一个字符串， APPEND 命令将 value 追加到 key 原来的值的末尾



************************Hash  相当于 $arr=[name=>wang]，arr里面对应一个数组
*******设置值
HSET key field value 将哈希表 key 中的字段 field 的值设为 value 。相当于一个二维数组,例如hset t1 name wang
HSETNX key field value 只有在字段 field 不存在时，设置哈希表字段的值
HMSET key field1 value1 [field2 value2 ] 同时将多个 field-value (域-值)对设置到哈希表 key 中。



*******获取值
HGET key field 获取存储在哈希表中指定字段的值
HMGET key field1 [field2] 获取所有给定字段的值
HGETALL key 获取在哈希表中指定 key 的所有字段和值
例如下：
127.0.0.1:6379> hmset b1 m1 1 m2 2 m3 3
OK
127.0.0.1:6379> hgetall b1
1) "m1"
2) "1"
3) "m2"
4) "2"
5) "m3"
6) "3"
HKEYS key 获取所有哈希表中的字段
HVALS key 获取哈希表中所有值
hstrlen key field 获取指定字段长度
HLEN key 获取哈希表中字段的数量

******其它
HEXISTS key field 查看哈希表 key 中，指定的字段是否存在。
HDEL key field2 [field2] 删除一个或多个哈希表字段
HINCRBY key field increment 为哈希表 key 中的指定字段的整数值加上增量
HINCRBY key field increment 为哈希表 key 中的指定字段的整数值加上增量
HINCRBYFLOAT key field increment 为哈希表 key 中的指定字段的浮点数值加上增量 increment 。


*********************list列表 相当于 name=(1,2,3,4,5,6),name里面分别设置了里面的值
********设置值
RPUSH key value1 [value2] 在列表中添加一个或多个值
RPUSHX key value 为已存在的列表添加值
LPUSH key value1 [value2] 将一个或多个值插入到列表头部
LPUSHX key value 将一个或多个值插入到已存在的列表头部
LINSERT key BEFORE|AFTER pivot value 在列表的元素前或者后插入元素
LSET key index value 通过索引设置列表元素的值


********获取值
LINDEX key index 通过索引获取列表中的元素
LRANGE key start stop 获取列表指定范围内的元素

********其它
RPOP key 移除并获取列表最后一个元素
LLEN key 获取列表长度
LPOP key 移出并获取列表的第一个元素
LREM key count value 移除列表元素，如果有重复的值，count可选个数，没重复的写1或者大于1的数字都可以
RPOPLPUSH source destination 移除列表的最后一个元素，并将该元素添加到另一个列表并返回
LTRIM key start stop 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。
BLPOP key1 [key2 ] timeout 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。
BRPOP key1 [key2 ] timeout 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止
BRPOPLPUSH source destination timeout 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。


*****************set 无序集合   相当于 name=(1,2,3,4,5,6,7),跟list类似
在Redis中，Set和List类似，它们都是一个字符串序列，但不同之处在于Set内部使用哈希表来保持所有字符串的唯一性(虽然没有关联的值)。
********设置值
SADD key member1 [member2] 向集合添加一个或多个成员


********获取值
SMEMBERS key 返回集合中的所有成员
SCARD key 获取集合的成员数




********其它
SISMEMBER key member 判断 member 元素是否是集合 key 的成员
SPOP key 移除并返回集合中的一个随机元素
SRANDMEMBER key [count] 返回集合中一个或多个随机数
SREM key member1 [member2] 移除集合中一个或多个成员
SMOVE source destination member 将 member 元素从 source 集合移动到 destination 集合
SDIFF key1 [key2] 返回给定所有集合的差集，key1相对key2的
SDIFFSTORE destination key1 [key2] 返回给定所有集合的差集并存储在 destination 中
SINTER key1 [key2] 返回给定所有集合的交集
SINTERSTORE destination key1 [key2] 返回给定所有集合的交集并存储在 destination 中
SUNION key1 [key2] 返回所有给定集合的并集
SUNIONSTORE destination key1 [key2] 所有给定集合的并集存储在 destination 集合中


************************Zset有序集合  类似于 $arr=[1=>wang,2=>li,3=>zhang];
*********设置值
ZADD key score1 member1 [score2 member2] 向有序集合添加一个或多个成员，或者更新已存在成员的分数 


*********获取值
ZSCORE key member 返回有序集中，成员的分数值
ZRANGE key start stop [WITHSCORES] 通过索引区间返回有序集合成指定区间内的成员
ZCARD key 获取有序集合的成员数
ZCOUNT key min max 计算在有序集合中指定区间分数的成员数
ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT] 通过分数返回有序集合指定区间内的成员
ZRANK key member 返回有序集合中指定成员的索引
ZREM key member [member ...] 移除有序集合中的一个或多个成员
ZREV RANGE BY SCORE key max min [WITHSCORES] 返回有序集中指定分数区间内的成员，分数从高到低排序
ZREV RANK key member 返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序



*********其它
ZINCRBY key increment member 有序集合中对指定成员的分数加上增量increment
ZREM RANGE BY RANK key start stop 移除有序集合中给定的排名区间的所有成员
ZREM RANGE BY SCORE key min max 移除有序集合中给定的分数区间的所有成员
ZREV RANGE key start stop [WITHSCORES] 返回有序集中指定区间内的成员，通过索引，分数从高到底
ZUNION STORE destination numkeys key [key ...] 计算给定的一个或多个有序集的并集，并存储在新的 key 中
ZINTER STORE destination numkeys key [key ...] 计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中







**************事务

和众多其他数据库一样，Redis作为NoSQL数据库也同样提供了事务机制，在Redis中，MULTI/EXEC/DISCARD/WATCH这个四个命令是实现事务的基石。

命令/Command	命令描述	返回值

MULTI:用于标记事务的开始，其后执行的命令都将被存入命令队列，知道执行EXEC时，这些命令才会被;始终返回OK

EXEC:执行在一个事务内命令队列中的所有命令，同时将当前连接的状态恢复为正常状态，即非事务状态;原子性的返回事务中各条命令的返回结果

DISCARD:	回滚事务队列中的所有命令，同时再将当前连接的状态恢复为正常状态。	始终返回OK
WATCH 	WATCH key[key2...]在MULTI命令执行之前，可以指定待监控的keys，然而在执行EXEC之前，如果被监控的keys发生修改，EXEC将放弃执行该事务队列中的所有命令	;始终返回OK

UNWATCH:取消当前事务中指定监控的keys，如果执行了EXEC或DISCARD命令，则无需再手动执行该命令了，因为在此之后，事务中所有被监控的keys都将自动取消	始终返回OK





*************备份数据
1.启动redis运行redis-cli
2.数据备份
redis 127.0.0.1:6379> SAVE 
该命令将在 redis 备份目录中自动创建dump.rdb文件。

*************恢复数据
1.获取备份目录
redis 127.0.0.1:6379> CONFIG GET dir
以上命令 CONFIG GET dir 输出的 redis 备份目录
2.停止redis服务
3.拷贝备份文件到 备份目录下(dump.rdb是备份的数据)
4.重新启动redis服务







